/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"TicketingApp","structs":{},"methods":[{"name":"bootstrap","args":[{"type":"uint64","name":"asset_id"},{"type":"uint64","name":"price"},{"type":"uint64","name":"start"},{"type":"uint64","name":"end"},{"type":"uint64","name":"per_wallet_cap"},{"type":"address","name":"organizer"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Bootstrap the ticket sale with ASA and sale parameters.","events":[],"recommendations":{}},{"name":"buy","args":[{"type":"uint64","name":"qty"},{"type":"address","name":"buyer"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Buy tickets by sending ALGO payment.","events":[],"recommendations":{}},{"name":"withdraw","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Withdraw proceeds to organizer.","events":[],"recommendations":{}},{"name":"get_sale_info","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64,address,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get sale information.","events":[],"recommendations":{}},{"name":"get_purchased","args":[{"type":"address","name":"buyer"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get number of tickets purchased by a specific buyer.","events":[],"recommendations":{}},{"name":"hello","args":[{"type":"string","name":"name"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"A simple hello world method for testing.","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"A ticketing smart contract that handles ticket sales for pre-created ASAs.","networks":{},"state":{"schema":{"global":{"ints":6,"bytes":1},"local":{"ints":1,"bytes":0}},"keys":{"global":{"asset_id":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRfaWQ="},"unit_price":{"keyType":"AVMString","valueType":"AVMUint64","key":"dW5pdF9wcmljZQ=="},"sale_start":{"keyType":"AVMString","valueType":"AVMUint64","key":"c2FsZV9zdGFydA=="},"sale_end":{"keyType":"AVMString","valueType":"AVMUint64","key":"c2FsZV9lbmQ="},"organizer":{"keyType":"AVMString","valueType":"address","key":"b3JnYW5pemVy"},"per_cap":{"keyType":"AVMString","valueType":"AVMUint64","key":"cGVyX2NhcA=="},"proceeds":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHJvY2VlZHM="}},"local":{"purchased":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHVyY2hhc2Vk"}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[94],"errorMessage":"OnCompletion must be NoOp"},{"pc":[215],"errorMessage":"already bootstrapped"},{"pc":[313],"errorMessage":"cap"},{"pc":[213,341,415],"errorMessage":"check self.asset_id exists"},{"pc":[345,382,398,434],"errorMessage":"check self.organizer exists"},{"pc":[309,439],"errorMessage":"check self.per_cap exists"},{"pc":[324,388,443],"errorMessage":"check self.proceeds exists"},{"pc":[301,487],"errorMessage":"check self.purchased exists for account"},{"pc":[279,430],"errorMessage":"check self.sale_end exists"},{"pc":[270,425],"errorMessage":"check self.sale_start exists"},{"pc":[329,420],"errorMessage":"check self.unit_price exists"},{"pc":[508],"errorMessage":"invalid number of bytes for (len+utf8[])"},{"pc":[164,173,182,191,200,253],"errorMessage":"invalid number of bytes for uint64"},{"pc":[209,262,482],"errorMessage":"invalid number of bytes for uint8[32]"},{"pc":[390],"errorMessage":"nothing to withdraw"},{"pc":[384],"errorMessage":"only organizer"},{"pc":[291],"errorMessage":"qty"},{"pc":[287],"errorMessage":"sale closed"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CyAEAAEIICYJCW9yZ2FuaXplcghwcm9jZWVkcwhhc3NldF9pZAQVH3x1CnVuaXRfcHJpY2UKc2FsZV9zdGFydAhzYWxlX2VuZAdwZXJfY2FwCXB1cmNoYXNlZDEZFEQxGEEAK4IFBBZY21IEtzVf0QS+DfU8BADPzmUEAr7OETYaAI4FAGcA6wEOAU0BYQCABHhlYJM2GgCOAQABADYaAUkVJBJEFzYaAkkVJBJEFzYaA0kVJBJEFzYaBEkVJBJEFzYaBUkVJBJEFzYaBkkVJRJEIiplRBREKk8GZycETwVnJwVPBGcnBk8DZycHTwJnKExnI0M2GgFHAhUkEkQXNhoCSRUlEkQyB0kiJwVlRA9BAGIiJwZlREsBD0EAVyNESwJJREsCSU4CIicIY0RLAQgiJwdlREsBD0RLAicITwJmIillRCInBGVESwILCClMZ7EiKmVEIihlRE8CshJPArIUshOyEYEEshAisgGzK0sEULAjQyJC/6YxACIoZUQSRCIpZURJRCkiZ7EiKGVEsgeyCCOyECKyAbMjQyIqZUQiJwRlRCInBWVEIicGZUQiKGVEIicHZUQiKWVETwYWTwYWUE8FFlBPBBZQTwNQTwIWUEwWUCtMULAjQzYaAUkVJRJEIicIY0QWK0xQsCNDNhoBSSJZgQIISwEVEkRXAgCAB0hlbGxvLCBMUEkVFlcGAkxQK0xQsCND","clear":"C4EBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":5,"minor":2,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the TicketingApp contract
 */
export type TicketingAppArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'bootstrap(uint64,uint64,uint64,uint64,uint64,address)void': {
      assetId: bigint | number
      price: bigint | number
      start: bigint | number
      end: bigint | number
      perWalletCap: bigint | number
      organizer: string
    }
    'buy(uint64,address)uint64': {
      qty: bigint | number
      buyer: string
    }
    'withdraw()void': Record<string, never>
    'get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)': Record<string, never>
    'get_purchased(address)uint64': {
      buyer: string
    }
    'hello(string)string': {
      name: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'bootstrap(uint64,uint64,uint64,uint64,uint64,address)void': [assetId: bigint | number, price: bigint | number, start: bigint | number, end: bigint | number, perWalletCap: bigint | number, organizer: string]
    'buy(uint64,address)uint64': [qty: bigint | number, buyer: string]
    'withdraw()void': []
    'get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)': []
    'get_purchased(address)uint64': [buyer: string]
    'hello(string)string': [name: string]
  }
}

/**
 * The return type for each method
 */
export type TicketingAppReturns = {
  'bootstrap(uint64,uint64,uint64,uint64,uint64,address)void': void
  'buy(uint64,address)uint64': bigint
  'withdraw()void': void
  'get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)': [bigint, bigint, bigint, bigint, string, bigint, bigint]
  'get_purchased(address)uint64': bigint
  'hello(string)string': string
}

/**
 * Defines the types of available calls and state of the TicketingApp smart contract.
 */
export type TicketingAppTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrap(uint64,uint64,uint64,uint64,uint64,address)void' | 'bootstrap', {
      argsObj: TicketingAppArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,address)void']
      argsTuple: TicketingAppArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,address)void']
      returns: TicketingAppReturns['bootstrap(uint64,uint64,uint64,uint64,uint64,address)void']
    }>
    & Record<'buy(uint64,address)uint64' | 'buy', {
      argsObj: TicketingAppArgs['obj']['buy(uint64,address)uint64']
      argsTuple: TicketingAppArgs['tuple']['buy(uint64,address)uint64']
      returns: TicketingAppReturns['buy(uint64,address)uint64']
    }>
    & Record<'withdraw()void' | 'withdraw', {
      argsObj: TicketingAppArgs['obj']['withdraw()void']
      argsTuple: TicketingAppArgs['tuple']['withdraw()void']
      returns: TicketingAppReturns['withdraw()void']
    }>
    & Record<'get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)' | 'get_sale_info', {
      argsObj: TicketingAppArgs['obj']['get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)']
      argsTuple: TicketingAppArgs['tuple']['get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)']
      returns: TicketingAppReturns['get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)']
    }>
    & Record<'get_purchased(address)uint64' | 'get_purchased', {
      argsObj: TicketingAppArgs['obj']['get_purchased(address)uint64']
      argsTuple: TicketingAppArgs['tuple']['get_purchased(address)uint64']
      returns: TicketingAppReturns['get_purchased(address)uint64']
    }>
    & Record<'hello(string)string' | 'hello', {
      argsObj: TicketingAppArgs['obj']['hello(string)string']
      argsTuple: TicketingAppArgs['tuple']['hello(string)string']
      returns: TicketingAppReturns['hello(string)string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        assetId: bigint
        unitPrice: bigint
        saleStart: bigint
        saleEnd: bigint
        organizer: string
        perCap: bigint
        proceeds: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        purchased: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TicketingAppSignatures = keyof TicketingAppTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TicketingAppNonVoidMethodSignatures = keyof TicketingAppTypes['methods'] extends infer T ? T extends keyof TicketingAppTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TicketingApp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TicketingAppSignatures> = TicketingAppTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TicketingApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TicketingAppSignatures> = TicketingAppTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TicketingAppTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = TicketingAppTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TicketingAppCreateCallParams =
  | Expand<CallParams<TicketingAppArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,address)void'] | TicketingAppArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,address)void']> & {method: 'bootstrap'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<TicketingAppArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,address)void'] | TicketingAppArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,address)void']> & {method: 'bootstrap(uint64,uint64,uint64,uint64,uint64,address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TicketingAppDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TicketingAppCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TicketingApp smart contract
 */
export abstract class TicketingAppParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends TicketingAppCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'bootstrap':
          case 'bootstrap(uint64,uint64,uint64,uint64,uint64,address)void':
            return TicketingAppParamsFactory.create.bootstrap(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the TicketingApp smart contract using the bootstrap(uint64,uint64,uint64,uint64,uint64,address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      bootstrap(params: CallParams<TicketingAppArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,address)void'] | TicketingAppArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'bootstrap(uint64,uint64,uint64,uint64,uint64,address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.price, params.args.start, params.args.end, params.args.perWalletCap, params.args.organizer],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the buy(uint64,address)uint64 ABI method
   *
   * Buy tickets by sending ALGO payment.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buy(params: CallParams<TicketingAppArgs['obj']['buy(uint64,address)uint64'] | TicketingAppArgs['tuple']['buy(uint64,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buy(uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.qty, params.args.buyer],
    }
  }
  /**
   * Constructs a no op call for the withdraw()void ABI method
   *
   * Withdraw proceeds to organizer.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdraw(params: CallParams<TicketingAppArgs['obj']['withdraw()void'] | TicketingAppArgs['tuple']['withdraw()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64) ABI method
   *
   * Get sale information.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getSaleInfo(params: CallParams<TicketingAppArgs['obj']['get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)'] | TicketingAppArgs['tuple']['get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_purchased(address)uint64 ABI method
   *
   * Get number of tickets purchased by a specific buyer.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPurchased(params: CallParams<TicketingAppArgs['obj']['get_purchased(address)uint64'] | TicketingAppArgs['tuple']['get_purchased(address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_purchased(address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.buyer],
    }
  }
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * A simple hello world method for testing.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<TicketingAppArgs['obj']['hello(string)string'] | TicketingAppArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TicketingApp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TicketingAppFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TicketingAppFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TicketingAppClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TicketingAppClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TicketingApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TicketingAppDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? TicketingAppParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (TicketingAppCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new TicketingAppClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TicketingApp smart contract using the bootstrap(uint64,uint64,uint64,uint64,uint64,address)void ABI method.
       *
       * Bootstrap the ticket sale with ASA and sale parameters.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      bootstrap: (params: CallParams<TicketingAppArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,address)void'] | TicketingAppArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(TicketingAppParamsFactory.create.bootstrap(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TicketingApp smart contract using the bootstrap(uint64,uint64,uint64,uint64,uint64,address)void ABI method.
       *
       * Bootstrap the ticket sale with ASA and sale parameters.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      bootstrap: (params: CallParams<TicketingAppArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,address)void'] | TicketingAppArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(TicketingAppParamsFactory.create.bootstrap(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TicketingApp smart contract using an ABI method call using the bootstrap(uint64,uint64,uint64,uint64,uint64,address)void ABI method.
       *
       * Bootstrap the ticket sale with ASA and sale parameters.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      bootstrap: async (params: CallParams<TicketingAppArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,address)void'] | TicketingAppArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(TicketingAppParamsFactory.create.bootstrap(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | TicketingAppReturns['bootstrap(uint64,uint64,uint64,uint64,uint64,address)void']) }, appClient: new TicketingAppClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TicketingApp smart contract
 */
export class TicketingAppClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TicketingAppClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TicketingApp app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TicketingAppClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TicketingAppNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TicketingAppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TicketingAppClient> {
    return new TicketingAppClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TicketingAppClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TicketingAppClient> {
    return new TicketingAppClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the TicketingApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `buy(uint64,address)uint64` ABI method.
     *
     * Buy tickets by sending ALGO payment.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buy: (params: CallParams<TicketingAppArgs['obj']['buy(uint64,address)uint64'] | TicketingAppArgs['tuple']['buy(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketingAppParamsFactory.buy(params))
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `withdraw()void` ABI method.
     *
     * Withdraw proceeds to organizer.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdraw: (params: CallParams<TicketingAppArgs['obj']['withdraw()void'] | TicketingAppArgs['tuple']['withdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TicketingAppParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)` ABI method.
     *
     * Get sale information.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getSaleInfo: (params: CallParams<TicketingAppArgs['obj']['get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)'] | TicketingAppArgs['tuple']['get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(TicketingAppParamsFactory.getSaleInfo(params))
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `get_purchased(address)uint64` ABI method.
     *
     * Get number of tickets purchased by a specific buyer.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPurchased: (params: CallParams<TicketingAppArgs['obj']['get_purchased(address)uint64'] | TicketingAppArgs['tuple']['get_purchased(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketingAppParamsFactory.getPurchased(params))
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `hello(string)string` ABI method.
     *
     * A simple hello world method for testing.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<TicketingAppArgs['obj']['hello(string)string'] | TicketingAppArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketingAppParamsFactory.hello(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the TicketingApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `buy(uint64,address)uint64` ABI method.
     *
     * Buy tickets by sending ALGO payment.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buy: (params: CallParams<TicketingAppArgs['obj']['buy(uint64,address)uint64'] | TicketingAppArgs['tuple']['buy(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketingAppParamsFactory.buy(params))
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `withdraw()void` ABI method.
     *
     * Withdraw proceeds to organizer.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdraw: (params: CallParams<TicketingAppArgs['obj']['withdraw()void'] | TicketingAppArgs['tuple']['withdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TicketingAppParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)` ABI method.
     *
     * Get sale information.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getSaleInfo: (params: CallParams<TicketingAppArgs['obj']['get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)'] | TicketingAppArgs['tuple']['get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(TicketingAppParamsFactory.getSaleInfo(params))
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `get_purchased(address)uint64` ABI method.
     *
     * Get number of tickets purchased by a specific buyer.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPurchased: (params: CallParams<TicketingAppArgs['obj']['get_purchased(address)uint64'] | TicketingAppArgs['tuple']['get_purchased(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketingAppParamsFactory.getPurchased(params))
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `hello(string)string` ABI method.
     *
     * A simple hello world method for testing.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<TicketingAppArgs['obj']['hello(string)string'] | TicketingAppArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketingAppParamsFactory.hello(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the TicketingApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `buy(uint64,address)uint64` ABI method.
     *
     * Buy tickets by sending ALGO payment.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buy: async (params: CallParams<TicketingAppArgs['obj']['buy(uint64,address)uint64'] | TicketingAppArgs['tuple']['buy(uint64,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketingAppParamsFactory.buy(params))
      return {...result, return: result.return as unknown as (undefined | TicketingAppReturns['buy(uint64,address)uint64'])}
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `withdraw()void` ABI method.
     *
     * Withdraw proceeds to organizer.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdraw: async (params: CallParams<TicketingAppArgs['obj']['withdraw()void'] | TicketingAppArgs['tuple']['withdraw()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TicketingAppParamsFactory.withdraw(params))
      return {...result, return: result.return as unknown as (undefined | TicketingAppReturns['withdraw()void'])}
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)` ABI method.
     *
     * Get sale information.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getSaleInfo: async (params: CallParams<TicketingAppArgs['obj']['get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)'] | TicketingAppArgs['tuple']['get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(TicketingAppParamsFactory.getSaleInfo(params))
      return {...result, return: result.return as unknown as (undefined | TicketingAppReturns['get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)'])}
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `get_purchased(address)uint64` ABI method.
     *
     * Get number of tickets purchased by a specific buyer.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPurchased: async (params: CallParams<TicketingAppArgs['obj']['get_purchased(address)uint64'] | TicketingAppArgs['tuple']['get_purchased(address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketingAppParamsFactory.getPurchased(params))
      return {...result, return: result.return as unknown as (undefined | TicketingAppReturns['get_purchased(address)uint64'])}
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `hello(string)string` ABI method.
     *
     * A simple hello world method for testing.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<TicketingAppArgs['obj']['hello(string)string'] | TicketingAppArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketingAppParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | TicketingAppReturns['hello(string)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TicketingAppClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current TicketingApp app
   */
  state = {
    /**
     * Methods to access global state for the current TicketingApp app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          assetId: result.asset_id,
          unitPrice: result.unit_price,
          saleStart: result.sale_start,
          saleEnd: result.sale_end,
          organizer: result.organizer,
          perCap: result.per_cap,
          proceeds: result.proceeds,
        }
      },
      /**
       * Get the current value of the asset_id key in global state
       */
      assetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asset_id")) as bigint | undefined },
      /**
       * Get the current value of the unit_price key in global state
       */
      unitPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("unit_price")) as bigint | undefined },
      /**
       * Get the current value of the sale_start key in global state
       */
      saleStart: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("sale_start")) as bigint | undefined },
      /**
       * Get the current value of the sale_end key in global state
       */
      saleEnd: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("sale_end")) as bigint | undefined },
      /**
       * Get the current value of the organizer key in global state
       */
      organizer: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("organizer")) as string | undefined },
      /**
       * Get the current value of the per_cap key in global state
       */
      perCap: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("per_cap")) as bigint | undefined },
      /**
       * Get the current value of the proceeds key in global state
       */
      proceeds: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("proceeds")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current TicketingApp app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            purchased: result.purchased,
          }
        },
        /**
         * Get the current value of the purchased key in local state
         */
        purchased: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("purchased")) as bigint | undefined },
      }
    },
  }

  public newGroup(): TicketingAppComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a buy(uint64,address)uint64 method call against the TicketingApp contract
       */
      buy(params: CallParams<TicketingAppArgs['obj']['buy(uint64,address)uint64'] | TicketingAppArgs['tuple']['buy(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buy(params)))
        resultMappers.push((v) => client.decodeReturnValue('buy(uint64,address)uint64', v))
        return this
      },
      /**
       * Add a withdraw()void method call against the TicketingApp contract
       */
      withdraw(params: CallParams<TicketingAppArgs['obj']['withdraw()void'] | TicketingAppArgs['tuple']['withdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64) method call against the TicketingApp contract
       */
      getSaleInfo(params: CallParams<TicketingAppArgs['obj']['get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)'] | TicketingAppArgs['tuple']['get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getSaleInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)', v))
        return this
      },
      /**
       * Add a get_purchased(address)uint64 method call against the TicketingApp contract
       */
      getPurchased(params: CallParams<TicketingAppArgs['obj']['get_purchased(address)uint64'] | TicketingAppArgs['tuple']['get_purchased(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPurchased(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_purchased(address)uint64', v))
        return this
      },
      /**
       * Add a hello(string)string method call against the TicketingApp contract
       */
      hello(params: CallParams<TicketingAppArgs['obj']['hello(string)string'] | TicketingAppArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a clear state call to the TicketingApp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TicketingAppComposer
  }
}
export type TicketingAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the buy(uint64,address)uint64 ABI method.
   *
   * Buy tickets by sending ALGO payment.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buy(params?: CallParams<TicketingAppArgs['obj']['buy(uint64,address)uint64'] | TicketingAppArgs['tuple']['buy(uint64,address)uint64']>): TicketingAppComposer<[...TReturns, TicketingAppReturns['buy(uint64,address)uint64'] | undefined]>

  /**
   * Calls the withdraw()void ABI method.
   *
   * Withdraw proceeds to organizer.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(params?: CallParams<TicketingAppArgs['obj']['withdraw()void'] | TicketingAppArgs['tuple']['withdraw()void']>): TicketingAppComposer<[...TReturns, TicketingAppReturns['withdraw()void'] | undefined]>

  /**
   * Calls the get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64) ABI method.
   *
   * Get sale information.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getSaleInfo(params?: CallParams<TicketingAppArgs['obj']['get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)'] | TicketingAppArgs['tuple']['get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)']>): TicketingAppComposer<[...TReturns, TicketingAppReturns['get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)'] | undefined]>

  /**
   * Calls the get_purchased(address)uint64 ABI method.
   *
   * Get number of tickets purchased by a specific buyer.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPurchased(params?: CallParams<TicketingAppArgs['obj']['get_purchased(address)uint64'] | TicketingAppArgs['tuple']['get_purchased(address)uint64']>): TicketingAppComposer<[...TReturns, TicketingAppReturns['get_purchased(address)uint64'] | undefined]>

  /**
   * Calls the hello(string)string ABI method.
   *
   * A simple hello world method for testing.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<TicketingAppArgs['obj']['hello(string)string'] | TicketingAppArgs['tuple']['hello(string)string']>): TicketingAppComposer<[...TReturns, TicketingAppReturns['hello(string)string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the TicketingApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TicketingAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TicketingAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TicketingAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TicketingAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TicketingAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TicketingAppComposerResults<TReturns>>
}
export type TicketingAppComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

