/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"TicketingApp","structs":{},"methods":[{"name":"hello","args":[{"type":"string","name":"name"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"createEvent","args":[{"type":"string","name":"title","desc":"Event title"},{"type":"string","name":"subtitle","desc":"Event subtitle"},{"type":"string","name":"description","desc":"Event description"},{"type":"uint64","name":"start_date","desc":"Unix timestamp of event start"},{"type":"uint64","name":"end_date","desc":"Unix timestamp of event end"},{"type":"string","name":"timezone","desc":"Event timezone"},{"type":"string","name":"location_type","desc":"Type of event (in-person, virtual, hybrid)"},{"type":"string","name":"venue","desc":"Venue name (if applicable)"},{"type":"string","name":"city","desc":"City name"},{"type":"string","name":"country","desc":"Country name"},{"type":"string","name":"website","desc":"Event website URL"},{"type":"string","name":"ticket_name","desc":"Name of the ticket type"},{"type":"uint64","name":"ticket_supply","desc":"Total number of tickets to mint"},{"type":"uint64","name":"price","desc":"Price per ticket in microALGOs"},{"type":"string","name":"currency","desc":"Currency type (ALGO/USDC)"},{"type":"uint64","name":"per_wallet_limit","desc":"Maximum tickets per wallet"},{"type":"uint64","name":"resale_allowed","desc":"Whether resale is allowed (0/1)"},{"type":"address","name":"treasury_address","desc":"Address to receive ticket revenue"},{"type":"address","name":"issuer_address","desc":"Address that manages the event"},{"type":"string","name":"asa_unit_name","desc":"Unit name for the ASA"},{"type":"string","name":"asa_asset_name","desc":"Asset name for the ASA"},{"type":"uint64","name":"royalty_bps","desc":"Royalty in basis points"},{"type":"string","name":"vc_issuer_did","desc":"DID for VC issuer"},{"type":"string","name":"vc_schema_url","desc":"URL for VC schema"},{"type":"uint64","name":"enable_qr","desc":"Whether QR check-in is enabled (0/1)"},{"type":"uint64","name":"data_minimised","desc":"Whether to use data minimization (0/1)"}],"returns":{"type":"uint64","desc":"The created event ASA ID"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new event by minting an ASA and storing event data in global state.","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[22],"errorMessage":"OnCompletion must be NoOp"},{"pc":[55],"errorMessage":"OnCompletion must be NoOp && can only call when creating"},{"pc":[68,108,120,132,158,170,182,194,206,219,234],"errorMessage":"invalid number of bytes for (len+utf8[])"},{"pc":[139,146,242,250],"errorMessage":"invalid number of bytes for uint64"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CyAEAAIIASYBBBUffHUxG0EAHTEZFEQxGESCAgQCvs4RBKi1XrQ2GgCOAgAJADIAMRkUMRgUEEM2GgFJIlkjCEsBFRJEVwIAgAdIZWxsbywgTFBJFRZXBgJMUChMULAlQzYaAUkiWSMITBUSRDYaAkkiWSMITBUSRDYaA0kiWSMITBUSRDYaBBUkEkQ2GgUVJBJENhoGSSJZIwhMFRJENhoHSSJZIwhMFRJENhoISSJZIwhMFRJENhoJSSJZIwhMFRJENhoKSSJZIwhMFRJENhoLSSJZIwhLARUSRFcCADYaDEkiWSMITBUSRDYaDUkVJBJEFzYaDhUkEkQ2Gg9XEiA2Gg9XMiA2Gg9JgVJZSwGBVFlSVwIANhoPSYFUWUsBgV5ZUlcCALGADEVWRU5UX1RJQ0tFVLIFTwWyJ0sCsixLArIrTwOyKk8CsimyJrIlIrIkIrIjsiKBA7IQIrIBs7Q8FihMULAlQw==","clear":"C4EBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":5,"minor":2,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the TicketingApp contract
 */
export type TicketingAppArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'hello(string)string': {
      name: string
    }
    'createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64': {
      /**
       * Event title
       */
      title: string
      /**
       * Event subtitle
       */
      subtitle: string
      /**
       * Event description
       */
      description: string
      /**
       * Unix timestamp of event start
       */
      startDate: bigint | number
      /**
       * Unix timestamp of event end
       */
      endDate: bigint | number
      /**
       * Event timezone
       */
      timezone: string
      /**
       * Type of event (in-person, virtual, hybrid)
       */
      locationType: string
      /**
       * Venue name (if applicable)
       */
      venue: string
      /**
       * City name
       */
      city: string
      /**
       * Country name
       */
      country: string
      /**
       * Event website URL
       */
      website: string
      /**
       * Name of the ticket type
       */
      ticketName: string
      /**
       * Total number of tickets to mint
       */
      ticketSupply: bigint | number
      /**
       * Price per ticket in microALGOs
       */
      price: bigint | number
      /**
       * Currency type (ALGO/USDC)
       */
      currency: string
      /**
       * Maximum tickets per wallet
       */
      perWalletLimit: bigint | number
      /**
       * Whether resale is allowed (0/1)
       */
      resaleAllowed: bigint | number
      /**
       * Address to receive ticket revenue
       */
      treasuryAddress: string
      /**
       * Address that manages the event
       */
      issuerAddress: string
      /**
       * Unit name for the ASA
       */
      asaUnitName: string
      /**
       * Asset name for the ASA
       */
      asaAssetName: string
      /**
       * Royalty in basis points
       */
      royaltyBps: bigint | number
      /**
       * DID for VC issuer
       */
      vcIssuerDid: string
      /**
       * URL for VC schema
       */
      vcSchemaUrl: string
      /**
       * Whether QR check-in is enabled (0/1)
       */
      enableQr: bigint | number
      /**
       * Whether to use data minimization (0/1)
       */
      dataMinimised: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'hello(string)string': [name: string]
    'createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64': [title: string, subtitle: string, description: string, startDate: bigint | number, endDate: bigint | number, timezone: string, locationType: string, venue: string, city: string, country: string, website: string, ticketName: string, ticketSupply: bigint | number, price: bigint | number, currency: string, perWalletLimit: bigint | number, resaleAllowed: bigint | number, treasuryAddress: string, issuerAddress: string, asaUnitName: string, asaAssetName: string, royaltyBps: bigint | number, vcIssuerDid: string, vcSchemaUrl: string, enableQr: bigint | number, dataMinimised: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type TicketingAppReturns = {
  'hello(string)string': string
  'createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64': bigint
}

/**
 * Defines the types of available calls and state of the TicketingApp smart contract.
 */
export type TicketingAppTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'hello(string)string' | 'hello', {
      argsObj: TicketingAppArgs['obj']['hello(string)string']
      argsTuple: TicketingAppArgs['tuple']['hello(string)string']
      returns: TicketingAppReturns['hello(string)string']
    }>
    & Record<'createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64' | 'createEvent', {
      argsObj: TicketingAppArgs['obj']['createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64']
      argsTuple: TicketingAppArgs['tuple']['createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64']
      /**
       * The created event ASA ID
       */
      returns: TicketingAppReturns['createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type TicketingAppSignatures = keyof TicketingAppTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TicketingAppNonVoidMethodSignatures = keyof TicketingAppTypes['methods'] extends infer T ? T extends keyof TicketingAppTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TicketingApp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TicketingAppSignatures> = TicketingAppTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TicketingApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TicketingAppSignatures> = TicketingAppTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type TicketingAppCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TicketingAppDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TicketingAppCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TicketingApp smart contract
 */
export abstract class TicketingAppParamsFactory {
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<TicketingAppArgs['obj']['hello(string)string'] | TicketingAppArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64 ABI method
   *
   * Create a new event by minting an ASA and storing event data in global state.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createEvent(params: CallParams<TicketingAppArgs['obj']['createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64'] | TicketingAppArgs['tuple']['createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.title, params.args.subtitle, params.args.description, params.args.startDate, params.args.endDate, params.args.timezone, params.args.locationType, params.args.venue, params.args.city, params.args.country, params.args.website, params.args.ticketName, params.args.ticketSupply, params.args.price, params.args.currency, params.args.perWalletLimit, params.args.resaleAllowed, params.args.treasuryAddress, params.args.issuerAddress, params.args.asaUnitName, params.args.asaAssetName, params.args.royaltyBps, params.args.vcIssuerDid, params.args.vcSchemaUrl, params.args.enableQr, params.args.dataMinimised],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TicketingApp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TicketingAppFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TicketingAppFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TicketingAppClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TicketingAppClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TicketingApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TicketingAppDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new TicketingAppClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TicketingApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TicketingApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TicketingApp smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new TicketingAppClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TicketingApp smart contract
 */
export class TicketingAppClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TicketingAppClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TicketingApp app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TicketingAppClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TicketingAppNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TicketingAppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TicketingAppClient> {
    return new TicketingAppClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TicketingAppClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TicketingAppClient> {
    return new TicketingAppClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the TicketingApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<TicketingAppArgs['obj']['hello(string)string'] | TicketingAppArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketingAppParamsFactory.hello(params))
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64` ABI method.
     *
     * Create a new event by minting an ASA and storing event data in global state.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The created event ASA ID
     */
    createEvent: (params: CallParams<TicketingAppArgs['obj']['createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64'] | TicketingAppArgs['tuple']['createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketingAppParamsFactory.createEvent(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the TicketingApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<TicketingAppArgs['obj']['hello(string)string'] | TicketingAppArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketingAppParamsFactory.hello(params))
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64` ABI method.
     *
     * Create a new event by minting an ASA and storing event data in global state.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The created event ASA ID
     */
    createEvent: (params: CallParams<TicketingAppArgs['obj']['createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64'] | TicketingAppArgs['tuple']['createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketingAppParamsFactory.createEvent(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the TicketingApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<TicketingAppArgs['obj']['hello(string)string'] | TicketingAppArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketingAppParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | TicketingAppReturns['hello(string)string'])}
    },

    /**
     * Makes a call to the TicketingApp smart contract using the `createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64` ABI method.
     *
     * Create a new event by minting an ASA and storing event data in global state.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The created event ASA ID
     */
    createEvent: async (params: CallParams<TicketingAppArgs['obj']['createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64'] | TicketingAppArgs['tuple']['createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketingAppParamsFactory.createEvent(params))
      return {...result, return: result.return as unknown as (undefined | TicketingAppReturns['createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TicketingAppClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current TicketingApp app
   */
  state = {
  }

  public newGroup(): TicketingAppComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a hello(string)string method call against the TicketingApp contract
       */
      hello(params: CallParams<TicketingAppArgs['obj']['hello(string)string'] | TicketingAppArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64 method call against the TicketingApp contract
       */
      createEvent(params: CallParams<TicketingAppArgs['obj']['createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64'] | TicketingAppArgs['tuple']['createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createEvent(params)))
        resultMappers.push((v) => client.decodeReturnValue('createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the TicketingApp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TicketingAppComposer
  }
}
export type TicketingAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<TicketingAppArgs['obj']['hello(string)string'] | TicketingAppArgs['tuple']['hello(string)string']>): TicketingAppComposer<[...TReturns, TicketingAppReturns['hello(string)string'] | undefined]>

  /**
   * Calls the createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64 ABI method.
   *
   * Create a new event by minting an ASA and storing event data in global state.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createEvent(params?: CallParams<TicketingAppArgs['obj']['createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64'] | TicketingAppArgs['tuple']['createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64']>): TicketingAppComposer<[...TReturns, TicketingAppReturns['createEvent(string,string,string,uint64,uint64,string,string,string,string,string,string,string,uint64,uint64,string,uint64,uint64,address,address,string,string,uint64,string,string,uint64,uint64)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the TicketingApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TicketingAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TicketingAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TicketingAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TicketingAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TicketingAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TicketingAppComposerResults<TReturns>>
}
export type TicketingAppComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

