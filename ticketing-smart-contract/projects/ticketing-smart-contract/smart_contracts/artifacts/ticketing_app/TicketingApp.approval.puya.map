{
  "version": 3,
  "sources": [
    "../../ticketing_app/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AAgBK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AASU;AAAA;AAAA;AAAA;AAAA;AAAP;AACA;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;AAAA;AAAA;AAfH;AAAA;AAiBA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIS;;AAAA;AACQ;AAAA;;AAAA;AAAA;AAAP;AAAA;;;AAAwC;AAAA;;AAAA;AAAA;AAAP;;AAAA;AAAjC;;;;AAAP;AACA;;AAAA;AAAA;AAMO;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAA+B;AAAA;;AAAA;AAAA;AAA/B;;AAAA;AAAP;AAGA;;AAAA;;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AAA6B;AAAA;;AAAA;AAAA;AAAN;;AAAA;AAAvB;AAAA;AAAA;AAAA;AAIA;AACe;AAAA;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;;;;;;;;;;;;;AAFjB;;;;AAAA;;;AAAA;AApBH;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;AAiCU;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AACM;AAAA;AAAA;AAAA;AACN;AAAA;AAEA;AAAsB;AAAtB;AAGA;AACa;AAAA;AAAA;AAAA;;;;;AADb;;;AAAA;;;AAAA;AAVH;AAAA;AAmBO;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAVP;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGU;AAAA;;AAAA;AAAA;AAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAGU;;;;;;;;;AAAA;AAAA;AAHV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 32"
    },
    "7": {
      "op": "bytecblock \"organizer\" \"proceeds\" \"asset_id\" 0x151f7c75 \"unit_price\" \"sale_start\" \"sale_end\" \"per_cap\" \"purchased\""
    },
    "91": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "93": {
      "op": "!",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "94": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "95": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "97": {
      "op": "bz main_create_NoOp@11",
      "stack_out": []
    },
    "100": {
      "op": "pushbytess 0x1658db52 0xb7355fd1 0xbe0df53c 0x00cfce65 0x02bece11 // method \"buy(uint64,address)uint64\", method \"withdraw()void\", method \"get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64)\", method \"get_purchased(address)uint64\", method \"hello(string)string\"",
      "defined_out": [
        "Method(buy(uint64,address)uint64)",
        "Method(get_purchased(address)uint64)",
        "Method(get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64))",
        "Method(hello(string)string)",
        "Method(withdraw()void)"
      ],
      "stack_out": [
        "Method(buy(uint64,address)uint64)",
        "Method(withdraw()void)",
        "Method(get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64))",
        "Method(get_purchased(address)uint64)",
        "Method(hello(string)string)"
      ]
    },
    "127": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(buy(uint64,address)uint64)",
        "Method(get_purchased(address)uint64)",
        "Method(get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64))",
        "Method(hello(string)string)",
        "Method(withdraw()void)",
        "tmp%4#0"
      ],
      "stack_out": [
        "Method(buy(uint64,address)uint64)",
        "Method(withdraw()void)",
        "Method(get_sale_info()(uint64,uint64,uint64,uint64,address,uint64,uint64))",
        "Method(get_purchased(address)uint64)",
        "Method(hello(string)string)",
        "tmp%4#0"
      ]
    },
    "130": {
      "op": "match buy withdraw get_sale_info get_purchased hello",
      "stack_out": []
    },
    "142": {
      "op": "err"
    },
    "143": {
      "block": "main_create_NoOp@11",
      "stack_in": [],
      "op": "pushbytes 0x78656093 // method \"bootstrap(uint64,uint64,uint64,uint64,uint64,address)void\"",
      "defined_out": [
        "Method(bootstrap(uint64,uint64,uint64,uint64,uint64,address)void)"
      ],
      "stack_out": [
        "Method(bootstrap(uint64,uint64,uint64,uint64,uint64,address)void)"
      ]
    },
    "149": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(bootstrap(uint64,uint64,uint64,uint64,uint64,address)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(bootstrap(uint64,uint64,uint64,uint64,uint64,address)void)",
        "tmp%5#0"
      ]
    },
    "152": {
      "op": "match bootstrap",
      "stack_out": []
    },
    "156": {
      "op": "err"
    },
    "157": {
      "subroutine": "smart_contracts.ticketing_app.contract.TicketingApp.bootstrap[routing]",
      "params": {},
      "block": "bootstrap",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "160": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "161": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "162": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "163": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "164": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "165": {
      "op": "btoi",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "166": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "asset_id#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset_id#0",
        "tmp%2#0"
      ]
    },
    "169": {
      "op": "dup",
      "defined_out": [
        "asset_id#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "asset_id#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "170": {
      "op": "len",
      "defined_out": [
        "asset_id#0",
        "len%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset_id#0",
        "tmp%2#0",
        "len%1#0"
      ]
    },
    "171": {
      "op": "intc_2 // 8",
      "stack_out": [
        "asset_id#0",
        "tmp%2#0",
        "len%1#0",
        "8"
      ]
    },
    "172": {
      "op": "==",
      "defined_out": [
        "asset_id#0",
        "eq%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset_id#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "173": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "asset_id#0",
        "tmp%2#0"
      ]
    },
    "174": {
      "op": "btoi",
      "defined_out": [
        "asset_id#0",
        "price#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0"
      ]
    },
    "175": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "asset_id#0",
        "price#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "tmp%4#0"
      ]
    },
    "178": {
      "op": "dup",
      "defined_out": [
        "asset_id#0",
        "price#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "179": {
      "op": "len",
      "defined_out": [
        "asset_id#0",
        "len%2#0",
        "price#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "tmp%4#0",
        "len%2#0"
      ]
    },
    "180": {
      "op": "intc_2 // 8",
      "stack_out": [
        "asset_id#0",
        "price#0",
        "tmp%4#0",
        "len%2#0",
        "8"
      ]
    },
    "181": {
      "op": "==",
      "defined_out": [
        "asset_id#0",
        "eq%2#0",
        "price#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "182": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "asset_id#0",
        "price#0",
        "tmp%4#0"
      ]
    },
    "183": {
      "op": "btoi",
      "defined_out": [
        "asset_id#0",
        "price#0",
        "start#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0"
      ]
    },
    "184": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "tmp%6#0"
      ]
    },
    "187": {
      "op": "dup",
      "defined_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "188": {
      "op": "len",
      "defined_out": [
        "asset_id#0",
        "len%3#0",
        "price#0",
        "start#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "tmp%6#0",
        "len%3#0"
      ]
    },
    "189": {
      "op": "intc_2 // 8",
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "tmp%6#0",
        "len%3#0",
        "8"
      ]
    },
    "190": {
      "op": "==",
      "defined_out": [
        "asset_id#0",
        "eq%3#0",
        "price#0",
        "start#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "tmp%6#0",
        "eq%3#0"
      ]
    },
    "191": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "tmp%6#0"
      ]
    },
    "192": {
      "op": "btoi",
      "defined_out": [
        "asset_id#0",
        "end#0",
        "price#0",
        "start#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0"
      ]
    },
    "193": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "asset_id#0",
        "end#0",
        "price#0",
        "start#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "tmp%8#0"
      ]
    },
    "196": {
      "op": "dup",
      "defined_out": [
        "asset_id#0",
        "end#0",
        "price#0",
        "start#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "197": {
      "op": "len",
      "defined_out": [
        "asset_id#0",
        "end#0",
        "len%4#0",
        "price#0",
        "start#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "tmp%8#0",
        "len%4#0"
      ]
    },
    "198": {
      "op": "intc_2 // 8",
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "tmp%8#0",
        "len%4#0",
        "8"
      ]
    },
    "199": {
      "op": "==",
      "defined_out": [
        "asset_id#0",
        "end#0",
        "eq%4#0",
        "price#0",
        "start#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "tmp%8#0",
        "eq%4#0"
      ]
    },
    "200": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "tmp%8#0"
      ]
    },
    "201": {
      "op": "btoi",
      "defined_out": [
        "asset_id#0",
        "end#0",
        "per_wallet_cap#0",
        "price#0",
        "start#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "per_wallet_cap#0"
      ]
    },
    "202": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "asset_id#0",
        "end#0",
        "organizer#0",
        "per_wallet_cap#0",
        "price#0",
        "start#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0"
      ]
    },
    "205": {
      "op": "dup",
      "defined_out": [
        "asset_id#0",
        "end#0",
        "organizer#0",
        "organizer#0 (copy)",
        "per_wallet_cap#0",
        "price#0",
        "start#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0",
        "organizer#0 (copy)"
      ]
    },
    "206": {
      "op": "len",
      "defined_out": [
        "asset_id#0",
        "end#0",
        "len%5#0",
        "organizer#0",
        "per_wallet_cap#0",
        "price#0",
        "start#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0",
        "len%5#0"
      ]
    },
    "207": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "asset_id#0",
        "end#0",
        "len%5#0",
        "organizer#0",
        "per_wallet_cap#0",
        "price#0",
        "start#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0",
        "len%5#0",
        "32"
      ]
    },
    "208": {
      "op": "==",
      "defined_out": [
        "asset_id#0",
        "end#0",
        "eq%5#0",
        "organizer#0",
        "per_wallet_cap#0",
        "price#0",
        "start#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0",
        "eq%5#0"
      ]
    },
    "209": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0"
      ]
    },
    "210": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset_id#0",
        "end#0",
        "organizer#0",
        "per_wallet_cap#0",
        "price#0",
        "start#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0",
        "0"
      ]
    },
    "211": {
      "op": "bytec_2 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\"",
        "0",
        "asset_id#0",
        "end#0",
        "organizer#0",
        "per_wallet_cap#0",
        "price#0",
        "start#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0",
        "0",
        "\"asset_id\""
      ]
    },
    "212": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset_id#0",
        "end#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "organizer#0",
        "per_wallet_cap#0",
        "price#0",
        "start#0"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "213": {
      "error": "check self.asset_id exists",
      "op": "assert // check self.asset_id exists",
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0",
        "maybe_value%0#0"
      ]
    },
    "214": {
      "op": "!",
      "defined_out": [
        "asset_id#0",
        "end#0",
        "organizer#0",
        "per_wallet_cap#0",
        "price#0",
        "start#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0",
        "tmp%0#1"
      ]
    },
    "215": {
      "error": "already bootstrapped",
      "op": "assert // already bootstrapped",
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0"
      ]
    },
    "216": {
      "op": "bytec_2 // \"asset_id\"",
      "stack_out": [
        "asset_id#0",
        "price#0",
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0",
        "\"asset_id\""
      ]
    },
    "217": {
      "op": "uncover 6",
      "stack_out": [
        "price#0",
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0",
        "\"asset_id\"",
        "asset_id#0"
      ]
    },
    "219": {
      "op": "app_global_put",
      "stack_out": [
        "price#0",
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0"
      ]
    },
    "220": {
      "op": "bytec 4 // \"unit_price\"",
      "defined_out": [
        "\"unit_price\"",
        "end#0",
        "organizer#0",
        "per_wallet_cap#0",
        "price#0",
        "start#0"
      ],
      "stack_out": [
        "price#0",
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0",
        "\"unit_price\""
      ]
    },
    "222": {
      "op": "uncover 5",
      "stack_out": [
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0",
        "\"unit_price\"",
        "price#0"
      ]
    },
    "224": {
      "op": "app_global_put",
      "stack_out": [
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0"
      ]
    },
    "225": {
      "op": "bytec 5 // \"sale_start\"",
      "defined_out": [
        "\"sale_start\"",
        "end#0",
        "organizer#0",
        "per_wallet_cap#0",
        "start#0"
      ],
      "stack_out": [
        "start#0",
        "end#0",
        "per_wallet_cap#0",
        "organizer#0",
        "\"sale_start\""
      ]
    },
    "227": {
      "op": "uncover 4",
      "stack_out": [
        "end#0",
        "per_wallet_cap#0",
        "organizer#0",
        "\"sale_start\"",
        "start#0"
      ]
    },
    "229": {
      "op": "app_global_put",
      "stack_out": [
        "end#0",
        "per_wallet_cap#0",
        "organizer#0"
      ]
    },
    "230": {
      "op": "bytec 6 // \"sale_end\"",
      "defined_out": [
        "\"sale_end\"",
        "end#0",
        "organizer#0",
        "per_wallet_cap#0"
      ],
      "stack_out": [
        "end#0",
        "per_wallet_cap#0",
        "organizer#0",
        "\"sale_end\""
      ]
    },
    "232": {
      "op": "uncover 3",
      "stack_out": [
        "per_wallet_cap#0",
        "organizer#0",
        "\"sale_end\"",
        "end#0"
      ]
    },
    "234": {
      "op": "app_global_put",
      "stack_out": [
        "per_wallet_cap#0",
        "organizer#0"
      ]
    },
    "235": {
      "op": "bytec 7 // \"per_cap\"",
      "defined_out": [
        "\"per_cap\"",
        "organizer#0",
        "per_wallet_cap#0"
      ],
      "stack_out": [
        "per_wallet_cap#0",
        "organizer#0",
        "\"per_cap\""
      ]
    },
    "237": {
      "op": "uncover 2",
      "stack_out": [
        "organizer#0",
        "\"per_cap\"",
        "per_wallet_cap#0"
      ]
    },
    "239": {
      "op": "app_global_put",
      "stack_out": [
        "organizer#0"
      ]
    },
    "240": {
      "op": "bytec_0 // \"organizer\"",
      "defined_out": [
        "\"organizer\"",
        "organizer#0"
      ],
      "stack_out": [
        "organizer#0",
        "\"organizer\""
      ]
    },
    "241": {
      "op": "swap",
      "stack_out": [
        "\"organizer\"",
        "organizer#0"
      ]
    },
    "242": {
      "op": "app_global_put",
      "stack_out": []
    },
    "243": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "244": {
      "op": "return",
      "stack_out": []
    },
    "245": {
      "subroutine": "smart_contracts.ticketing_app.contract.TicketingApp.buy[routing]",
      "params": {},
      "block": "buy",
      "stack_in": [],
      "op": "txna ApplicationArgs 1"
    },
    "248": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "250": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "251": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "252": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "253": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "254": {
      "op": "btoi",
      "defined_out": [
        "qty#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0"
      ]
    },
    "255": {
      "op": "txna ApplicationArgs 2"
    },
    "258": {
      "op": "dup",
      "defined_out": [
        "buyer#0",
        "qty#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "buyer#0"
      ]
    },
    "259": {
      "op": "len",
      "defined_out": [
        "buyer#0",
        "len%1#0",
        "qty#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "len%1#0"
      ]
    },
    "260": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "buyer#0",
        "len%1#0",
        "qty#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "len%1#0",
        "32"
      ]
    },
    "261": {
      "op": "==",
      "defined_out": [
        "buyer#0",
        "eq%1#0",
        "qty#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "eq%1#0"
      ]
    },
    "262": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0"
      ]
    },
    "263": {
      "op": "global LatestTimestamp"
    },
    "265": {
      "op": "dup"
    },
    "266": {
      "op": "intc_0 // 0"
    },
    "267": {
      "op": "bytec 5 // \"sale_start\"",
      "defined_out": [
        "\"sale_start\"",
        "0",
        "buyer#0",
        "now#0",
        "qty#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "now#0",
        "0",
        "\"sale_start\""
      ]
    },
    "269": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyer#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "now#0",
        "qty#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "now#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "270": {
      "error": "check self.sale_start exists",
      "op": "assert // check self.sale_start exists",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "now#0",
        "maybe_value%0#0"
      ]
    },
    "271": {
      "op": ">=",
      "defined_out": [
        "buyer#0",
        "now#0",
        "qty#0",
        "tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "tmp%1#1"
      ]
    },
    "272": {
      "op": "bz buy_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0"
      ]
    },
    "275": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "0"
      ]
    },
    "276": {
      "op": "bytec 6 // \"sale_end\"",
      "defined_out": [
        "\"sale_end\"",
        "0",
        "buyer#0",
        "now#0",
        "qty#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "0",
        "\"sale_end\""
      ]
    },
    "278": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyer#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "now#0",
        "qty#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "279": {
      "error": "check self.sale_end exists",
      "op": "assert // check self.sale_end exists",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "maybe_value%1#0"
      ]
    },
    "280": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "maybe_value%1#0",
        "now#0"
      ]
    },
    "282": {
      "op": ">=",
      "defined_out": [
        "buyer#0",
        "now#0",
        "qty#0",
        "tmp%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "tmp%2#1"
      ]
    },
    "283": {
      "op": "bz buy_bool_false@4",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0"
      ]
    },
    "286": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "buyer#0",
        "now#0",
        "qty#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "and_result%0#0"
      ]
    },
    "287": {
      "error": "sale closed",
      "block": "buy_bool_merge@5",
      "stack_in": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "and_result%0#0"
      ],
      "op": "assert // sale closed",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0"
      ]
    },
    "288": {
      "op": "dig 2",
      "defined_out": [
        "qty#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "qty#0"
      ]
    },
    "290": {
      "op": "dup",
      "defined_out": [
        "qty#0",
        "qty#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "qty#0",
        "qty#0 (copy)"
      ]
    },
    "291": {
      "error": "qty",
      "op": "assert // qty",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "qty#0"
      ]
    },
    "292": {
      "op": "dig 2",
      "defined_out": [
        "buyer#0",
        "qty#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "qty#0",
        "buyer#0"
      ]
    },
    "294": {
      "op": "dup",
      "defined_out": [
        "buyer#0",
        "buyer#0 (copy)",
        "qty#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "qty#0",
        "buyer#0 (copy)",
        "buyer#0 (copy)"
      ]
    },
    "295": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "buyer#0 (copy)"
      ]
    },
    "297": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "buyer#0",
        "buyer#0 (copy)",
        "qty#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "buyer#0 (copy)",
        "0"
      ]
    },
    "298": {
      "op": "bytec 8 // \"purchased\"",
      "defined_out": [
        "\"purchased\"",
        "0",
        "buyer#0",
        "buyer#0 (copy)",
        "qty#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "buyer#0 (copy)",
        "0",
        "\"purchased\""
      ]
    },
    "300": {
      "op": "app_local_get_ex",
      "defined_out": [
        "buyer#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "qty#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "301": {
      "error": "check self.purchased exists for account",
      "op": "assert // check self.purchased exists for account",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "maybe_value%2#0"
      ]
    },
    "302": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "maybe_value%2#0",
        "qty#0 (copy)"
      ]
    },
    "304": {
      "op": "+",
      "defined_out": [
        "buyer#0",
        "qty#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "tmp%4#1"
      ]
    },
    "305": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "tmp%4#1",
        "0"
      ]
    },
    "306": {
      "op": "bytec 7 // \"per_cap\"",
      "defined_out": [
        "\"per_cap\"",
        "0",
        "buyer#0",
        "qty#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "tmp%4#1",
        "0",
        "\"per_cap\""
      ]
    },
    "308": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyer#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "qty#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "tmp%4#1",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "309": {
      "error": "check self.per_cap exists",
      "op": "assert // check self.per_cap exists",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "tmp%4#1",
        "maybe_value%3#0"
      ]
    },
    "310": {
      "op": "dig 1",
      "defined_out": [
        "buyer#0",
        "maybe_value%3#0",
        "qty#0",
        "tmp%4#1",
        "tmp%4#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "tmp%4#1",
        "maybe_value%3#0",
        "tmp%4#1 (copy)"
      ]
    },
    "312": {
      "op": ">=",
      "defined_out": [
        "buyer#0",
        "qty#0",
        "tmp%4#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "tmp%4#1",
        "tmp%5#1"
      ]
    },
    "313": {
      "error": "cap",
      "op": "assert // cap",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "tmp%4#1"
      ]
    },
    "314": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "tmp%4#1",
        "buyer#0 (copy)"
      ]
    },
    "316": {
      "op": "bytec 8 // \"purchased\"",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "tmp%4#1",
        "buyer#0 (copy)",
        "\"purchased\""
      ]
    },
    "318": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "buyer#0 (copy)",
        "\"purchased\"",
        "tmp%4#1"
      ]
    },
    "320": {
      "op": "app_local_put",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0"
      ]
    },
    "321": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "0"
      ]
    },
    "322": {
      "op": "bytec_1 // \"proceeds\"",
      "defined_out": [
        "\"proceeds\"",
        "0",
        "buyer#0",
        "qty#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "0",
        "\"proceeds\""
      ]
    },
    "323": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyer#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "qty#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "324": {
      "error": "check self.proceeds exists",
      "op": "assert // check self.proceeds exists",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "maybe_value%5#0"
      ]
    },
    "325": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "maybe_value%5#0",
        "0"
      ]
    },
    "326": {
      "op": "bytec 4 // \"unit_price\"",
      "defined_out": [
        "\"unit_price\"",
        "0",
        "buyer#0",
        "maybe_value%5#0",
        "qty#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "maybe_value%5#0",
        "0",
        "\"unit_price\""
      ]
    },
    "328": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyer#0",
        "maybe_exists%6#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "qty#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "329": {
      "error": "check self.unit_price exists",
      "op": "assert // check self.unit_price exists",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "330": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "qty#0 (copy)"
      ]
    },
    "332": {
      "op": "*",
      "defined_out": [
        "buyer#0",
        "maybe_value%5#0",
        "qty#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "maybe_value%5#0",
        "tmp%7#0"
      ]
    },
    "333": {
      "op": "+",
      "defined_out": [
        "buyer#0",
        "qty#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "tmp%8#0"
      ]
    },
    "334": {
      "op": "bytec_1 // \"proceeds\"",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "tmp%8#0",
        "\"proceeds\""
      ]
    },
    "335": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "\"proceeds\"",
        "tmp%8#0"
      ]
    },
    "336": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0"
      ]
    },
    "337": {
      "op": "itxn_begin"
    },
    "338": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "0"
      ]
    },
    "339": {
      "op": "bytec_2 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\"",
        "0",
        "buyer#0",
        "qty#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "0",
        "\"asset_id\""
      ]
    },
    "340": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyer#0",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "qty#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "341": {
      "error": "check self.asset_id exists",
      "op": "assert // check self.asset_id exists",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "maybe_value%7#0"
      ]
    },
    "342": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "maybe_value%7#0",
        "0"
      ]
    },
    "343": {
      "op": "bytec_0 // \"organizer\"",
      "defined_out": [
        "\"organizer\"",
        "0",
        "buyer#0",
        "maybe_value%7#0",
        "qty#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "maybe_value%7#0",
        "0",
        "\"organizer\""
      ]
    },
    "344": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyer#0",
        "maybe_exists%8#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "qty#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "345": {
      "error": "check self.organizer exists",
      "op": "assert // check self.organizer exists",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "qty#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ]
    },
    "346": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "qty#0"
      ]
    },
    "348": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "buyer#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ]
    },
    "350": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "buyer#0"
      ]
    },
    "352": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ]
    },
    "354": {
      "op": "itxn_field AssetSender",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "maybe_value%7#0"
      ]
    },
    "356": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0"
      ]
    },
    "358": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "buyer#0",
        "qty#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "axfer"
      ]
    },
    "360": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0"
      ]
    },
    "362": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "0"
      ]
    },
    "363": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0"
      ]
    },
    "365": {
      "op": "itxn_submit"
    },
    "366": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "buyer#0",
        "qty#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "0x151f7c75"
      ]
    },
    "367": {
      "op": "dig 4",
      "defined_out": [
        "0x151f7c75",
        "buyer#0",
        "qty#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "369": {
      "op": "concat",
      "defined_out": [
        "buyer#0",
        "qty#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "tmp%6#0"
      ]
    },
    "370": {
      "op": "log",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0"
      ]
    },
    "371": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "buyer#0",
        "qty#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "1"
      ]
    },
    "372": {
      "op": "return",
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0"
      ]
    },
    "373": {
      "block": "buy_bool_false@4",
      "stack_in": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "qty#0",
        "buyer#0",
        "now#0",
        "and_result%0#0"
      ]
    },
    "374": {
      "op": "b buy_bool_merge@5"
    },
    "377": {
      "subroutine": "smart_contracts.ticketing_app.contract.TicketingApp.withdraw[routing]",
      "params": {},
      "block": "withdraw",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "379": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "380": {
      "op": "bytec_0 // \"organizer\"",
      "defined_out": [
        "\"organizer\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"organizer\""
      ]
    },
    "381": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "382": {
      "error": "check self.organizer exists",
      "op": "assert // check self.organizer exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "383": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "384": {
      "error": "only organizer",
      "op": "assert // only organizer",
      "stack_out": []
    },
    "385": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "386": {
      "op": "bytec_1 // \"proceeds\"",
      "defined_out": [
        "\"proceeds\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"proceeds\""
      ]
    },
    "387": {
      "op": "app_global_get_ex",
      "defined_out": [
        "amt#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "amt#0",
        "maybe_exists%1#0"
      ]
    },
    "388": {
      "error": "check self.proceeds exists",
      "op": "assert // check self.proceeds exists",
      "stack_out": [
        "amt#0"
      ]
    },
    "389": {
      "op": "dup",
      "defined_out": [
        "amt#0",
        "amt#0 (copy)"
      ],
      "stack_out": [
        "amt#0",
        "amt#0 (copy)"
      ]
    },
    "390": {
      "error": "nothing to withdraw",
      "op": "assert // nothing to withdraw",
      "stack_out": [
        "amt#0"
      ]
    },
    "391": {
      "op": "bytec_1 // \"proceeds\"",
      "stack_out": [
        "amt#0",
        "\"proceeds\""
      ]
    },
    "392": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amt#0",
        "\"proceeds\"",
        "0"
      ]
    },
    "393": {
      "op": "app_global_put",
      "stack_out": [
        "amt#0"
      ]
    },
    "394": {
      "op": "itxn_begin"
    },
    "395": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amt#0",
        "0"
      ]
    },
    "396": {
      "op": "bytec_0 // \"organizer\"",
      "stack_out": [
        "amt#0",
        "0",
        "\"organizer\""
      ]
    },
    "397": {
      "op": "app_global_get_ex",
      "defined_out": [
        "amt#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "amt#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "398": {
      "error": "check self.organizer exists",
      "op": "assert // check self.organizer exists",
      "stack_out": [
        "amt#0",
        "maybe_value%2#0"
      ]
    },
    "399": {
      "op": "itxn_field Receiver"
    },
    "401": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "403": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "404": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "406": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "407": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "409": {
      "op": "itxn_submit"
    },
    "410": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "411": {
      "op": "return",
      "stack_out": []
    },
    "412": {
      "subroutine": "smart_contracts.ticketing_app.contract.TicketingApp.get_sale_info[routing]",
      "params": {},
      "block": "get_sale_info",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "413": {
      "op": "bytec_2 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset_id\""
      ]
    },
    "414": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "415": {
      "error": "check self.asset_id exists",
      "op": "assert // check self.asset_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "416": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "417": {
      "op": "bytec 4 // \"unit_price\"",
      "defined_out": [
        "\"unit_price\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"unit_price\""
      ]
    },
    "419": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "420": {
      "error": "check self.unit_price exists",
      "op": "assert // check self.unit_price exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "421": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "422": {
      "op": "bytec 5 // \"sale_start\"",
      "defined_out": [
        "\"sale_start\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"sale_start\""
      ]
    },
    "424": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "425": {
      "error": "check self.sale_start exists",
      "op": "assert // check self.sale_start exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "426": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "427": {
      "op": "bytec 6 // \"sale_end\"",
      "defined_out": [
        "\"sale_end\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"sale_end\""
      ]
    },
    "429": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "430": {
      "error": "check self.sale_end exists",
      "op": "assert // check self.sale_end exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "431": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "432": {
      "op": "bytec_0 // \"organizer\"",
      "defined_out": [
        "\"organizer\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"organizer\""
      ]
    },
    "433": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "434": {
      "error": "check self.organizer exists",
      "op": "assert // check self.organizer exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "435": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "436": {
      "op": "bytec 7 // \"per_cap\"",
      "defined_out": [
        "\"per_cap\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0",
        "\"per_cap\""
      ]
    },
    "438": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "439": {
      "error": "check self.per_cap exists",
      "op": "assert // check self.per_cap exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "440": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0"
      ]
    },
    "441": {
      "op": "bytec_1 // \"proceeds\"",
      "defined_out": [
        "\"proceeds\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0",
        "\"proceeds\""
      ]
    },
    "442": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "443": {
      "error": "check self.proceeds exists",
      "op": "assert // check self.proceeds exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "444": {
      "op": "uncover 6",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%0#0"
      ]
    },
    "446": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "447": {
      "op": "uncover 6",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "449": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "450": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%head%1#0"
      ]
    },
    "451": {
      "op": "uncover 5",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%head%1#0",
        "maybe_value%2#0"
      ]
    },
    "453": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "454": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%head%2#0"
      ]
    },
    "455": {
      "op": "uncover 4",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%head%2#0",
        "maybe_value%3#0"
      ]
    },
    "457": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%2#0",
        "aggregate%val_as_bytes%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%head%2#0",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "458": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%head%3#0"
      ]
    },
    "459": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%head%3#0",
        "maybe_value%4#0"
      ]
    },
    "461": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_value%6#0",
        "aggregate%head%4#0"
      ]
    },
    "462": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%6#0",
        "aggregate%head%4#0",
        "maybe_value%5#0"
      ]
    },
    "464": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%4#0",
        "aggregate%val_as_bytes%4#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "aggregate%head%4#0",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "465": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "aggregate%head%5#0"
      ]
    },
    "466": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%5#0",
        "maybe_value%6#0"
      ]
    },
    "467": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%5#0",
        "aggregate%val_as_bytes%5#0"
      ],
      "stack_out": [
        "aggregate%head%5#0",
        "aggregate%val_as_bytes%5#0"
      ]
    },
    "468": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%6#0"
      ],
      "stack_out": [
        "aggregate%head%6#0"
      ]
    },
    "469": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%6#0"
      ],
      "stack_out": [
        "aggregate%head%6#0",
        "0x151f7c75"
      ]
    },
    "470": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%head%6#0"
      ]
    },
    "471": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "472": {
      "op": "log",
      "stack_out": []
    },
    "473": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "474": {
      "op": "return",
      "stack_out": []
    },
    "475": {
      "subroutine": "smart_contracts.ticketing_app.contract.TicketingApp.get_purchased[routing]",
      "params": {},
      "block": "get_purchased",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "buyer#0"
      ],
      "stack_out": [
        "buyer#0"
      ]
    },
    "478": {
      "op": "dup",
      "defined_out": [
        "buyer#0",
        "buyer#0 (copy)"
      ],
      "stack_out": [
        "buyer#0",
        "buyer#0 (copy)"
      ]
    },
    "479": {
      "op": "len",
      "defined_out": [
        "buyer#0",
        "len%0#0"
      ],
      "stack_out": [
        "buyer#0",
        "len%0#0"
      ]
    },
    "480": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "buyer#0",
        "len%0#0"
      ],
      "stack_out": [
        "buyer#0",
        "len%0#0",
        "32"
      ]
    },
    "481": {
      "op": "==",
      "defined_out": [
        "buyer#0",
        "eq%0#0"
      ],
      "stack_out": [
        "buyer#0",
        "eq%0#0"
      ]
    },
    "482": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "buyer#0"
      ]
    },
    "483": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "buyer#0"
      ],
      "stack_out": [
        "buyer#0",
        "0"
      ]
    },
    "484": {
      "op": "bytec 8 // \"purchased\"",
      "defined_out": [
        "\"purchased\"",
        "0",
        "buyer#0"
      ],
      "stack_out": [
        "buyer#0",
        "0",
        "\"purchased\""
      ]
    },
    "486": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "487": {
      "error": "check self.purchased exists for account",
      "op": "assert // check self.purchased exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "488": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "489": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "490": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "491": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "492": {
      "op": "log",
      "stack_out": []
    },
    "493": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "494": {
      "op": "return",
      "stack_out": []
    },
    "495": {
      "subroutine": "smart_contracts.ticketing_app.contract.TicketingApp.hello[routing]",
      "params": {},
      "block": "hello",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "498": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "499": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "500": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "501": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "503": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "504": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "506": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "507": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "508": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "509": {
      "op": "extract 2 0",
      "defined_out": [
        "name#0"
      ],
      "stack_out": [
        "name#0"
      ]
    },
    "512": {
      "op": "pushbytes \"Hello, \"",
      "defined_out": [
        "\"Hello, \"",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "\"Hello, \""
      ]
    },
    "521": {
      "op": "swap",
      "stack_out": [
        "\"Hello, \"",
        "name#0"
      ]
    },
    "522": {
      "op": "concat",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "523": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "524": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%0#0"
      ]
    },
    "525": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "526": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "529": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "530": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "531": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "532": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "533": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "534": {
      "op": "log",
      "stack_out": []
    },
    "535": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "536": {
      "op": "return",
      "stack_out": []
    }
  }
}