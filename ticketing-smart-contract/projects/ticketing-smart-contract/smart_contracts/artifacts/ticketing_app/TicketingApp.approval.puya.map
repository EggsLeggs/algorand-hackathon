{
  "version": 3,
  "sources": [
    "../../ticketing_app/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAIA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;;;;AACK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAEU;;;;;;;;;AAAA;AAAA;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAiCiB;AAYL;;;;;;;;;;;;;;AADS;;;AADV;;;;;;;;;;;;;;;;;AANM;;;;;;;;;;AADK;;;AADN;;;;;AAFC;;;;AAAA;;;AAAA;;;AAjCjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 8 2 1"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 0x"
    },
    "15": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "17": {
      "op": "bz main___algopy_default_create@9",
      "stack_out": []
    },
    "20": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "22": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "23": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "24": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "26": {
      "op": "assert",
      "stack_out": []
    },
    "27": {
      "op": "pushbytess 0x02bece11 0x2fd6ac70 // method \"hello(string)string\", method \"createEvent(string,uint64,uint64,uint64,address)uint64\"",
      "defined_out": [
        "Method(createEvent(string,uint64,uint64,uint64,address)uint64)",
        "Method(hello(string)string)"
      ],
      "stack_out": [
        "Method(hello(string)string)",
        "Method(createEvent(string,uint64,uint64,uint64,address)uint64)"
      ]
    },
    "39": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createEvent(string,uint64,uint64,uint64,address)uint64)",
        "Method(hello(string)string)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(hello(string)string)",
        "Method(createEvent(string,uint64,uint64,uint64,address)uint64)",
        "tmp%6#0"
      ]
    },
    "42": {
      "op": "match hello createEvent",
      "stack_out": []
    },
    "48": {
      "op": "err"
    },
    "49": {
      "block": "main___algopy_default_create@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "51": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "52": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "54": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "55": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "56": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "57": {
      "subroutine": "smart_contracts.ticketing_app.contract.TicketingApp.hello[routing]",
      "params": {},
      "block": "hello",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "60": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "61": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "62": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "63": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "64": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "65": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "67": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "68": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "69": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "70": {
      "op": "extract 2 0",
      "defined_out": [
        "name#0"
      ],
      "stack_out": [
        "name#0"
      ]
    },
    "73": {
      "op": "pushbytes \"Hello, \"",
      "defined_out": [
        "\"Hello, \"",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "\"Hello, \""
      ]
    },
    "82": {
      "op": "swap",
      "stack_out": [
        "\"Hello, \"",
        "name#0"
      ]
    },
    "83": {
      "op": "concat",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "84": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "85": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%0#0"
      ]
    },
    "86": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "87": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "90": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%0#0"
      ]
    },
    "91": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "92": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "93": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "94": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "95": {
      "op": "log",
      "stack_out": []
    },
    "96": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "97": {
      "op": "return",
      "stack_out": []
    },
    "98": {
      "subroutine": "smart_contracts.ticketing_app.contract.TicketingApp.createEvent[routing]",
      "params": {},
      "block": "createEvent",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "101": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "102": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "103": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "104": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "105": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "106": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "108": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "109": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "110": {
      "error": "invalid number of bytes for (len+utf8[])",
      "op": "assert // invalid number of bytes for (len+utf8[])",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "111": {
      "op": "extract 2 0",
      "defined_out": [
        "event_name#0"
      ],
      "stack_out": [
        "event_name#0"
      ]
    },
    "114": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "event_name#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "event_name#0",
        "tmp%2#0"
      ]
    },
    "117": {
      "op": "len",
      "defined_out": [
        "event_name#0",
        "len%1#0"
      ],
      "stack_out": [
        "event_name#0",
        "len%1#0"
      ]
    },
    "118": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "event_name#0",
        "len%1#0"
      ],
      "stack_out": [
        "event_name#0",
        "len%1#0",
        "8"
      ]
    },
    "119": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "event_name#0"
      ],
      "stack_out": [
        "event_name#0",
        "eq%1#0"
      ]
    },
    "120": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "event_name#0"
      ]
    },
    "121": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "event_name#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "event_name#0",
        "tmp%4#0"
      ]
    },
    "124": {
      "op": "len",
      "defined_out": [
        "event_name#0",
        "len%2#0"
      ],
      "stack_out": [
        "event_name#0",
        "len%2#0"
      ]
    },
    "125": {
      "op": "intc_1 // 8",
      "stack_out": [
        "event_name#0",
        "len%2#0",
        "8"
      ]
    },
    "126": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "event_name#0"
      ],
      "stack_out": [
        "event_name#0",
        "eq%2#0"
      ]
    },
    "127": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "event_name#0"
      ]
    },
    "128": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "event_name#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "event_name#0",
        "tmp%6#0"
      ]
    },
    "131": {
      "op": "dup",
      "defined_out": [
        "event_name#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "event_name#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "132": {
      "op": "len",
      "defined_out": [
        "event_name#0",
        "len%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "event_name#0",
        "tmp%6#0",
        "len%3#0"
      ]
    },
    "133": {
      "op": "intc_1 // 8",
      "stack_out": [
        "event_name#0",
        "tmp%6#0",
        "len%3#0",
        "8"
      ]
    },
    "134": {
      "op": "==",
      "defined_out": [
        "eq%3#0",
        "event_name#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "event_name#0",
        "tmp%6#0",
        "eq%3#0"
      ]
    },
    "135": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "event_name#0",
        "tmp%6#0"
      ]
    },
    "136": {
      "op": "btoi",
      "defined_out": [
        "event_name#0",
        "seat_count#0"
      ],
      "stack_out": [
        "event_name#0",
        "seat_count#0"
      ]
    },
    "137": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "event_name#0",
        "event_organizer#0",
        "seat_count#0"
      ],
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0"
      ]
    },
    "140": {
      "op": "dup",
      "defined_out": [
        "event_name#0",
        "event_organizer#0",
        "event_organizer#0 (copy)",
        "seat_count#0"
      ],
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0",
        "event_organizer#0 (copy)"
      ]
    },
    "141": {
      "op": "len",
      "defined_out": [
        "event_name#0",
        "event_organizer#0",
        "len%4#0",
        "seat_count#0"
      ],
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0",
        "len%4#0"
      ]
    },
    "142": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "event_name#0",
        "event_organizer#0",
        "len%4#0",
        "seat_count#0"
      ],
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0",
        "len%4#0",
        "32"
      ]
    },
    "144": {
      "op": "==",
      "defined_out": [
        "eq%4#0",
        "event_name#0",
        "event_organizer#0",
        "seat_count#0"
      ],
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0",
        "eq%4#0"
      ]
    },
    "145": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0"
      ]
    },
    "146": {
      "op": "itxn_begin"
    },
    "147": {
      "op": "pushbytes 0x4556454e545f44415441",
      "defined_out": [
        "0x4556454e545f44415441",
        "event_name#0",
        "event_organizer#0",
        "seat_count#0"
      ],
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0",
        "0x4556454e545f44415441"
      ]
    },
    "159": {
      "op": "itxn_field Note",
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0"
      ]
    },
    "161": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "event_name#0",
        "event_organizer#0",
        "seat_count#0"
      ],
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0",
        "0x"
      ]
    },
    "162": {
      "op": "itxn_field ConfigAssetMetadataHash",
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0"
      ]
    },
    "164": {
      "op": "bytec_1 // \"\"",
      "defined_out": [
        "\"\"",
        "event_name#0",
        "event_organizer#0",
        "seat_count#0"
      ],
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0",
        "\"\""
      ]
    },
    "165": {
      "op": "itxn_field ConfigAssetURL",
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0"
      ]
    },
    "167": {
      "op": "dup",
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0",
        "event_organizer#0 (copy)"
      ]
    },
    "168": {
      "op": "itxn_field ConfigAssetClawback",
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0"
      ]
    },
    "170": {
      "op": "dup",
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0",
        "event_organizer#0 (copy)"
      ]
    },
    "171": {
      "op": "itxn_field ConfigAssetFreeze",
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0"
      ]
    },
    "173": {
      "op": "dup",
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0",
        "event_organizer#0 (copy)"
      ]
    },
    "174": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "event_name#0",
        "seat_count#0",
        "event_organizer#0"
      ]
    },
    "176": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "event_name#0",
        "seat_count#0"
      ]
    },
    "178": {
      "op": "swap",
      "stack_out": [
        "seat_count#0",
        "event_name#0"
      ]
    },
    "179": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "seat_count#0"
      ]
    },
    "181": {
      "op": "pushbytes \"TICKET\"",
      "defined_out": [
        "\"TICKET\"",
        "seat_count#0"
      ],
      "stack_out": [
        "seat_count#0",
        "\"TICKET\""
      ]
    },
    "189": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "seat_count#0"
      ]
    },
    "191": {
      "op": "intc_0 // 0",
      "stack_out": [
        "seat_count#0",
        "0"
      ]
    },
    "192": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": [
        "seat_count#0"
      ]
    },
    "194": {
      "op": "intc_0 // 0",
      "stack_out": [
        "seat_count#0",
        "0"
      ]
    },
    "195": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "seat_count#0"
      ]
    },
    "197": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "199": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "201": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "203": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "204": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "206": {
      "op": "itxn_submit"
    },
    "207": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "ixtn_result.CreatedAssetID#0"
      ],
      "stack_out": [
        "ixtn_result.CreatedAssetID#0"
      ]
    },
    "209": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "210": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "211": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "212": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "213": {
      "op": "log",
      "stack_out": []
    },
    "214": {
      "op": "intc_3 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "215": {
      "op": "return",
      "stack_out": []
    }
  }
}