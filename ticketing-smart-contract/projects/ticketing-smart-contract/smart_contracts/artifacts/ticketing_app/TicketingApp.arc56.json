{
    "name": "TicketingApp",
    "structs": {},
    "methods": [
        {
            "name": "hello",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createEvent",
            "args": [
                {
                    "type": "string",
                    "name": "event_name",
                    "desc": "Name of the event"
                },
                {
                    "type": "uint64",
                    "name": "event_date",
                    "desc": "Unix timestamp of the event date"
                },
                {
                    "type": "uint64",
                    "name": "ticket_price",
                    "desc": "Price per ticket in microALGOs"
                },
                {
                    "type": "uint64",
                    "name": "seat_count",
                    "desc": "Total number of seats/tickets available"
                },
                {
                    "type": "address",
                    "name": "event_organizer",
                    "desc": "Account that will manage the event"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The created event ASA ID"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new event by minting an ASA with encoded event information.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        23
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        56
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        69,
                        110
                    ],
                    "errorMessage": "invalid number of bytes for (len+utf8[])"
                },
                {
                    "pc": [
                        120,
                        127,
                        135
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        145
                    ],
                    "errorMessage": "invalid number of bytes for uint8[32]"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAgCASYCBBUffHUAMRtBAB0xGRREMRhEggIEAr7OEQQv1qxwNhoAjgIACQAyADEZFDEYFBBDNhoBSSJZJAhLARUSRFcCAIAHSGVsbG8sIExQSRUWVwYCTFAoTFCwJUM2GgFJIlkkCEsBFRJEVwIANhoCFSMSRDYaAxUjEkQ2GgRJFSMSRBc2GgVJFYEgEkSxgApFVkVOVF9EQVRBsgUpsigpsidJsixJsitJsiqyKUyyJoAGVElDS0VUsiUisiQisiOyIoEDshAisgGztDwWKExQsCVD",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}