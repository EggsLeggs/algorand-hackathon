{
    "name": "TicketingApp",
    "structs": {},
    "methods": [
        {
            "name": "bootstrap",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset_id"
                },
                {
                    "type": "uint64",
                    "name": "price"
                },
                {
                    "type": "uint64",
                    "name": "start"
                },
                {
                    "type": "uint64",
                    "name": "end"
                },
                {
                    "type": "uint64",
                    "name": "per_wallet_cap"
                },
                {
                    "type": "address",
                    "name": "organizer"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Bootstrap the ticket sale with ASA and sale parameters.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy",
            "args": [
                {
                    "type": "uint64",
                    "name": "qty"
                },
                {
                    "type": "address",
                    "name": "buyer"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Buy tickets by sending ALGO payment.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraw proceeds to organizer.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_sale_info",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,address,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get sale information.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_purchased",
            "args": [
                {
                    "type": "address",
                    "name": "buyer"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get number of tickets purchased by a specific buyer.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "hello",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "A simple hello world method for testing.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "A ticketing smart contract that handles ticket sales for pre-created ASAs.",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 6,
                "bytes": 1
            },
            "local": {
                "ints": 1,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "asset_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRfaWQ="
                },
                "unit_price": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dW5pdF9wcmljZQ=="
                },
                "sale_start": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c2FsZV9zdGFydA=="
                },
                "sale_end": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c2FsZV9lbmQ="
                },
                "organizer": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "b3JnYW5pemVy"
                },
                "per_cap": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGVyX2NhcA=="
                },
                "proceeds": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cHJvY2VlZHM="
                }
            },
            "local": {
                "purchased": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cHVyY2hhc2Vk"
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        94
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        215
                    ],
                    "errorMessage": "already bootstrapped"
                },
                {
                    "pc": [
                        313
                    ],
                    "errorMessage": "cap"
                },
                {
                    "pc": [
                        213,
                        341,
                        415
                    ],
                    "errorMessage": "check self.asset_id exists"
                },
                {
                    "pc": [
                        345,
                        382,
                        398,
                        434
                    ],
                    "errorMessage": "check self.organizer exists"
                },
                {
                    "pc": [
                        309,
                        439
                    ],
                    "errorMessage": "check self.per_cap exists"
                },
                {
                    "pc": [
                        324,
                        388,
                        443
                    ],
                    "errorMessage": "check self.proceeds exists"
                },
                {
                    "pc": [
                        301,
                        487
                    ],
                    "errorMessage": "check self.purchased exists for account"
                },
                {
                    "pc": [
                        279,
                        430
                    ],
                    "errorMessage": "check self.sale_end exists"
                },
                {
                    "pc": [
                        270,
                        425
                    ],
                    "errorMessage": "check self.sale_start exists"
                },
                {
                    "pc": [
                        329,
                        420
                    ],
                    "errorMessage": "check self.unit_price exists"
                },
                {
                    "pc": [
                        508
                    ],
                    "errorMessage": "invalid number of bytes for (len+utf8[])"
                },
                {
                    "pc": [
                        164,
                        173,
                        182,
                        191,
                        200,
                        253
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        209,
                        262,
                        482
                    ],
                    "errorMessage": "invalid number of bytes for uint8[32]"
                },
                {
                    "pc": [
                        390
                    ],
                    "errorMessage": "nothing to withdraw"
                },
                {
                    "pc": [
                        384
                    ],
                    "errorMessage": "only organizer"
                },
                {
                    "pc": [
                        291
                    ],
                    "errorMessage": "qty"
                },
                {
                    "pc": [
                        287
                    ],
                    "errorMessage": "sale closed"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAEIICYJCW9yZ2FuaXplcghwcm9jZWVkcwhhc3NldF9pZAQVH3x1CnVuaXRfcHJpY2UKc2FsZV9zdGFydAhzYWxlX2VuZAdwZXJfY2FwCXB1cmNoYXNlZDEZFEQxGEEAK4IFBBZY21IEtzVf0QS+DfU8BADPzmUEAr7OETYaAI4FAGcA6wEOAU0BYQCABHhlYJM2GgCOAQABADYaAUkVJBJEFzYaAkkVJBJEFzYaA0kVJBJEFzYaBEkVJBJEFzYaBUkVJBJEFzYaBkkVJRJEIiplRBREKk8GZycETwVnJwVPBGcnBk8DZycHTwJnKExnI0M2GgFHAhUkEkQXNhoCSRUlEkQyB0kiJwVlRA9BAGIiJwZlREsBD0EAVyNESwJJREsCSU4CIicIY0RLAQgiJwdlREsBD0RLAicITwJmIillRCInBGVESwILCClMZ7EiKmVEIihlRE8CshJPArIUshOyEYEEshAisgGzK0sEULAjQyJC/6YxACIoZUQSRCIpZURJRCkiZ7EiKGVEsgeyCCOyECKyAbMjQyIqZUQiJwRlRCInBWVEIicGZUQiKGVEIicHZUQiKWVETwYWTwYWUE8FFlBPBBZQTwNQTwIWUEwWUCtMULAjQzYaAUkVJRJEIicIY0QWK0xQsCNDNhoBSSJZgQIISwEVEkRXAgCAB0hlbGxvLCBMUEkVFlcGAkxQK0xQsCND",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}